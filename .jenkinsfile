pipeline {
    agent any
    environment {
        SONAR_TOKEN = credentials('sonar-token')
    }

      stages {
        stage('Clean') {
            steps {
                echo 'Cleaning /target..'
                sh 'mvn clean'
            }
        }
         stage('Unit Tests') {
             steps {
                 echo 'Running Unit Tests..'
                 sh 'mvn test'
                 junit 'target/surefire-reports/*.xml'
             }
         }
        stage('Mutation Tests') {
             steps {
                 echo 'Running Mutation Tests..'
                 sh 'mvn org.pitest:pitest-maven:mutationCoverage'
                  publishHTML (target : [allowMissing: false,
                              alwaysLinkToLastBuild: true,
                              keepAll: true,
                              reportDir: 'target/pit-reports',
                              reportFiles: 'index.html',
                              reportName: 'Mutation Test Report',
                              reportTitles: 'Mutation Test Report'])
             }
        }
//         stage('Integration Tests') {
//              steps {
//                  echo 'Running Integration and Acceptance Tests..'
//                  sh 'mvn verify'
//                  junit 'target/failsafe-reports/*.xml'
//              }
//         }
        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Analysis...'
                withSonarQubeEnv('SonarQubeServer') {
                    sh  'mvn sonar:sonar -Dsonar.projectKey=LMS -Dsonar.projectKey=LMS -Dsonar.projectName=LMS -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
                sh 'mvn install -DskipTests'
            }
        }
        stage('Build docker image') {
            steps {
                echo 'Building docker image....'
                sh 'docker build -t lms .'
            }
        }
        stage('Build docker container') {
            steps {
                echo 'Building docker container....'
                sh 'docker-compose up -d'
            }
        }

    }
}
